from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger
import aiohttp
import asyncio
from datetime import datetime
import random
import string

from state_manager import UserState
from utils.message_utils import delete_message
from config import WELCOME_IMAGE_URL

class PhotoHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –±–æ—Ç–∞"""
    
    def __init__(self, state_manager, db_manager, api_client, media_groups=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        
        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            api_client: –ö–ª–∏–µ–Ω—Ç API
            media_groups (dict, optional): –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
        """
        self.state_manager = state_manager
        self.db = db_manager
        self.api = api_client
        self.media_groups = media_groups if media_groups is not None else {}
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω PhotoHandler")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        
        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
        """
        if not update.effective_user or not update.message or not update.message.photo:
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å media_group_id, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ handle_media_group
        if update.message.media_group_id:
            return await self.handle_media_group(update, context)
        
        user_id = update.effective_user.id
        state = self.state_manager.get_state(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        if state != UserState.UPLOADING_PHOTOS:
            await update.message.reply_text(
                "–Ø –Ω–µ –æ–∂–∏–¥–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å–µ–π—á–∞—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /train, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏."
            )
            return
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        photo = update.message.photo[-1]
        photo_file = await context.bot.get_file(photo.file_id)
        photo_bytes = await photo_file.download_as_bytearray()
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            photo_data_url = await self.api.process_photo(photo_bytes)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–ø–∏—Å–æ–∫
            self.state_manager.add_to_list(user_id, "photos", photo_data_url)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            photos = self.state_manager.get_list(user_id, "photos")
            photos_count = len(photos)
            
            # –ü–æ–ª—É—á–∞–µ–º ID –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            base_message_id = self.state_manager.get_data(user_id, "base_message_id")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="cancel_training")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
            status_message = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_count}\n–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: –Ω–µ –º–µ–Ω–µ–µ {max(0, 3 - photos_count)} —Ñ–æ—Ç–æ.\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏."
            
            # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
            if photos_count >= 3:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥–µ–ª–∏
                model_name = self.state_manager.get_data(user_id, "model_name")
                model_type = self.state_manager.get_data(user_id, "model_type")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                keyboard = [
                    [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="start_training")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="cancel_training")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                status_message = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_count}\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏.\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {model_name}\n–¢–∏–ø: {'–ú—É–∂—Å–∫–∞—è' if model_type == 'male' else '–ñ–µ–Ω—Å–∫–∞—è'}"
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
            if base_message_id:
                try:
                    await context.bot.edit_message_caption(
                        chat_id=user_id,
                        message_id=base_message_id,
                        caption=status_message,
                        reply_markup=reply_markup
                    )
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ: {e}", exc_info=True)
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    sent_message = await context.bot.send_photo(
                        chat_id=user_id,
                        photo=WELCOME_IMAGE_URL,
                        caption=status_message,
                        reply_markup=reply_markup
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.state_manager.set_data(user_id, "base_message_id", sent_message.message_id)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                sent_message = await context.bot.send_photo(
                    chat_id=user_id,
                    photo=WELCOME_IMAGE_URL,
                    caption=status_message,
                    reply_markup=reply_markup
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                self.state_manager.set_data(user_id, "base_message_id", sent_message.message_id)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
            try:
                await update.message.delete()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
            )
            
    async def handle_media_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        
        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
        """
        if not update.effective_message:
            return
        
        media_group_id = update.effective_message.media_group_id
        if not media_group_id:
            return
            
        user_id = update.effective_user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {media_group_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        base_message_id = self.state_manager.get_data(user_id, "base_message_id")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
        if media_group_id not in self.media_groups:
            self.media_groups[media_group_id] = {
                "user_id": user_id,
                "file_paths": [],
                "last_update": datetime.now().timestamp(),
                "being_processed": False,  # –§–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                "processing_task": None,   # –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
                "status_message_id": base_message_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            }
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {media_group_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if base_message_id:
                try:
                    await context.bot.edit_message_caption(
                        chat_id=user_id,
                        message_id=base_message_id,
                        caption="üì∏ –ü–æ–ª—É—á–∞—é –≤–∞—à—É –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_training")]])
                    )
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π: {e}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                try:
                    sent_message = await context.bot.send_photo(
                        chat_id=user_id,
                        photo=WELCOME_IMAGE_URL,
                        caption="üì∏ –ü–æ–ª—É—á–∞—é –≤–∞—à—É –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_training")]])
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.state_manager.set_data(user_id, "base_message_id", sent_message.message_id)
                    self.media_groups[media_group_id]["status_message_id"] = sent_message.message_id
                    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã, ID: {sent_message.message_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo = update.effective_message.photo[-1]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ - —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä
        file = await context.bot.get_file(photo.file_id)
        file_path = file.file_path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç file_path
        if file_path not in self.media_groups[media_group_id]["file_paths"]:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–ø–∏—Å–æ–∫
            self.media_groups[media_group_id]["file_paths"].append(file_path)
        self.media_groups[media_group_id]["last_update"] = datetime.now().timestamp()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É {media_group_id}: {file_path}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        try:
            status_message_id = self.media_groups[media_group_id]["status_message_id"]
            if status_message_id:
                photos_count = len(self.media_groups[media_group_id]["file_paths"])
                await context.bot.edit_message_caption(
                    chat_id=user_id,
                    message_id=status_message_id,
                    caption=f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos_count}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_training")]])
                )
                logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({status_message_id}) –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {media_group_id}: {photos_count} —Ñ–æ—Ç–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –æ—Ç–º–µ–Ω—è–µ–º –µ–µ
        if self.media_groups[media_group_id].get("processing_task"):
            try:
                self.media_groups[media_group_id]["processing_task"].cancel()
                logger.debug(f"–û—Ç–º–µ–Ω–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {media_group_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏: {e}")
        
        # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        async def process_media_group_later():
            await asyncio.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ —É–∂–µ
            if media_group_id not in self.media_groups:
                logger.debug(f"–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {media_group_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–∞, –æ—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
            
            if self.media_groups[media_group_id]["being_processed"]:
                logger.debug(f"–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {media_group_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –æ—Ç–º–µ–Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
            
            # –û—Ç–º–µ—á–∞–µ–º –≥—Ä—É–ø–ø—É –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
            self.media_groups[media_group_id]["being_processed"] = True
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {media_group_id}")
            
            # –ï—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 1.5 —Å–µ–∫—É–Ω–¥, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            if datetime.now().timestamp() - self.media_groups[media_group_id]["last_update"] > 1.5:
                file_paths = self.media_groups[media_group_id]["file_paths"]
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {media_group_id} —Å {len(file_paths)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏")
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", callback_data=f"start_training_{media_group_id}"),
                    ],
                    [
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="cancel_training")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —ç—Ç–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                model_name = self.state_manager.get_data(user_id, "model_name")
                model_type = self.state_manager.get_data(user_id, "model_type")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
                if not model_name:
                    model_name = f"MediaGroup_{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}"
                    self.state_manager.set_data(user_id, "model_name", model_name)
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
                if not model_type:
                    model_type = "default"
                    self.state_manager.set_data(user_id, "model_type", model_type)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                status_message_id = self.media_groups[media_group_id]["status_message_id"]
                if status_message_id:
                    try:
                        await context.bot.edit_message_caption(
                            chat_id=user_id,
                            message_id=status_message_id,
                            caption=f"‚úÖ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ({len(file_paths)}) —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.\n\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {model_name}\n–¢–∏–ø: {'–ú—É–∂—Å–∫–∞—è' if model_type == 'male' else '–ñ–µ–Ω—Å–∫–∞—è'}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏.",
                            reply_markup=reply_markup
                        )
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({status_message_id}) –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {media_group_id} —Å –∫–Ω–æ–ø–∫–∞–º–∏")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # –ù–ï –æ—á–∏—â–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –æ–±—É—á–µ–Ω–∏—è
                logger.info(f"–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {media_group_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–µ
        task = asyncio.create_task(process_media_group_later())
        self.media_groups[media_group_id]["processing_task"] = task
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {media_group_id}") 