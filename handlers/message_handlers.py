from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger
from typing import Dict, Any, Optional
import aiohttp
import asyncio

from state_manager import UserState
from utils.message_utils import delete_message
from config import ENTER_PROMPT_MESSAGE
from utils.logging_utils import LogEventType

class MessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
    
    def __init__(self, state_manager, db_manager, api_client):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            state_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            api_client: –ö–ª–∏–µ–Ω—Ç API
        """
        self.state_manager = state_manager
        self.db = db_manager
        self.api = api_client
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω MessageHandler")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
        """
        if not update.effective_message or not update.effective_user:
            return
        
        text = update.effective_message.text
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = self.state_manager.get_state(user_id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç: '{text}', —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
        
        if state == UserState.ENTERING_MODEL_NAME:
            await self._handle_model_name_input(update, context, text, user_id)
        elif state == UserState.ENTERING_PROMPT:
            await self._handle_prompt_input(update, context, text, user_id)
        elif state == UserState.ENTERING_MODEL_NAME_FOR_MEDIA_GROUP:
            await self._handle_model_name_for_media_group(update, context, text, user_id)
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
            await self._handle_unknown_text(update, context, user_id)
    
    async def _handle_model_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, user_id: int) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏
        
        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è –º–æ–¥–µ–ª–∏
        if len(text) > 50:
            await update.message.reply_text("–ò–º—è –º–æ–¥–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –º–æ–¥–µ–ª–∏
        self.state_manager.set_data(user_id, "model_name", text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∏–º—è –º–æ–¥–µ–ª–∏: {text}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
        keyboard = [
            [
                InlineKeyboardButton("–ú—É–∂—Å–∫–∞—è", callback_data="type_male"),
                InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∞—è", callback_data="type_female")
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="cancel_training")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        base_message_id = self.state_manager.get_data(user_id, "base_message_id")
        
        if base_message_id:
            try:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏ –∏ –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞
                await context.bot.edit_message_caption(
                    chat_id=user_id,
                    message_id=base_message_id,
                    caption=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {text}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏:",
                    reply_markup=reply_markup
                )
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏: {e}", exc_info=True)
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = await context.bot.send_photo(
                    chat_id=user_id,
                    photo=WELCOME_IMAGE_URL,
                    caption=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {text}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏:",
                    reply_markup=reply_markup
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                self.state_manager.set_data(user_id, "base_message_id", sent_message.message_id)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            sent_message = await context.bot.send_photo(
                chat_id=user_id,
                photo=WELCOME_IMAGE_URL,
                caption=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {text}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏:",
                reply_markup=reply_markup
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.state_manager.set_data(user_id, "base_message_id", sent_message.message_id)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
        self.state_manager.set_state(user_id, UserState.SELECTING_MODEL_TYPE)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        try:
            await delete_message(context, user_id, update.message.message_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
    
    async def _handle_prompt_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, user_id: int) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø—Ä–æ–º–ø—Ç–∞
        if len(text) > 500:
            # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —á–∞—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ç–æ–º —É–¥–∞–ª–∏–º
            temp_msg = await update.message.reply_text("–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç.")
            # –£–¥–∞–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(self._delete_message_later(context, user_id, temp_msg.message_id, 5))
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
        self.state_manager.set_data(user_id, "prompt", text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –ø—Ä–æ–º–ø—Ç: {text}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥–µ–ª–∏
        model_id = self.state_manager.get_data(user_id, "model_id")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="start_generation")],
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="edit_prompt")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_generation")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –í–°–ï–ì–î–ê —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–æ–º–ø—Ç–æ–º
        try:
            await delete_message(context, user_id, update.message.message_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø—Ä–æ–º–ø—Ç–∞ –∏–ª–∏ –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        prompt_message_id = self.state_manager.get_data(user_id, "prompt_message_id")
        base_message_id = self.state_manager.get_data(user_id, "base_message_id")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ä–≤–∞ prompt_message_id, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - base_message_id
        message_id_to_edit = prompt_message_id or base_message_id
        
        success_message = f"‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n{text}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —ç—Ç–∏–º –ø—Ä–æ–º–ø—Ç–æ–º."
        
        if message_id_to_edit:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ caption (–µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ)
                try:
                    await context.bot.edit_message_caption(
                        chat_id=user_id,
                        message_id=message_id_to_edit,
                        caption=success_message,
                        reply_markup=reply_markup
                    )
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è ID {message_id_to_edit} —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    self.state_manager.set_data(user_id, "prompt_message_id", message_id_to_edit)
                    self.state_manager.set_state(user_id, UserState.GENERATING_IMAGES)
                    return
                except Exception as caption_error:
                    logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption: {str(caption_error)}, –ø—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç.")
                
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å caption, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                await context.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=message_id_to_edit,
                    text=success_message,
                    reply_markup=reply_markup
                )
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message_id_to_edit} —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                self.state_manager.set_data(user_id, "prompt_message_id", message_id_to_edit)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º: {e}", exc_info=True)
                
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    sent_message = await context.bot.send_photo(
                        chat_id=user_id,
                        photo=WELCOME_IMAGE_URL,
                        caption=success_message,
                        reply_markup=reply_markup
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.state_manager.set_data(user_id, "prompt_message_id", sent_message.message_id)
                    self.state_manager.set_data(user_id, "base_message_id", sent_message.message_id)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –ø—Ä–æ–º–ø—Ç–æ–º, ID: {sent_message.message_id}")
                except Exception as send_err:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {send_err}", exc_info=True)
                    # –í —Å–∞–º–æ–º –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    sent_message = await context.bot.send_message(
                        chat_id=user_id,
                        text=success_message,
                        reply_markup=reply_markup
                    )
                    self.state_manager.set_data(user_id, "prompt_message_id", sent_message.message_id)
                    self.state_manager.set_data(user_id, "base_message_id", sent_message.message_id)
        else:
            # –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            try:
                sent_message = await context.bot.send_photo(
                    chat_id=user_id,
                    photo=WELCOME_IMAGE_URL,
                    caption=success_message,
                    reply_markup=reply_markup
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                self.state_manager.set_data(user_id, "prompt_message_id", sent_message.message_id)
                self.state_manager.set_data(user_id, "base_message_id", sent_message.message_id)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –±–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏ –ø—Ä–æ–º–ø—Ç–æ–º, ID: {sent_message.message_id}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ: {e}", exc_info=True)
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_message = await context.bot.send_message(
                    chat_id=user_id,
                    text=success_message,
                    reply_markup=reply_markup
                )
                self.state_manager.set_data(user_id, "prompt_message_id", sent_message.message_id)
                self.state_manager.set_data(user_id, "base_message_id", sent_message.message_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state_manager.set_state(user_id, UserState.GENERATING_IMAGES)
    
    async def _delete_message_later(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int, delay_seconds: int):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        await asyncio.sleep(delay_seconds)
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —á–µ—Ä–µ–∑ {delay_seconds} —Å–µ–∫—É–Ω–¥")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}", exc_info=True)
    
    async def _handle_model_name_for_media_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, user_id: int) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        
        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        if len(text) > 50:
            await update.message.reply_text("–ò–º—è –º–æ–¥–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –º–æ–¥–µ–ª–∏
        self.state_manager.set_data(user_id, "model_name", text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∏–º—è –º–æ–¥–µ–ª–∏ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {text}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
        keyboard = [
            [
                InlineKeyboardButton("–ú—É–∂—Å–∫–∞—è", callback_data="mgtype_male"),
                InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∞—è", callback_data="mgtype_female")
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="cancel_training")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {text}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏:",
            reply_markup=reply_markup
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        self.state_manager.set_state(user_id, UserState.SELECTING_MODEL_TYPE_FOR_MEDIA_GROUP)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        try:
            await delete_message(context, user_id, update.message.message_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
    
    async def _handle_unknown_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        await update.message.reply_text(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/train - –û–±—É—á–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å\n"
            "/generate - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        try:
            await delete_message(context, user_id, update.message.message_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
