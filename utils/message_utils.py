from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from typing import List, Optional, Dict, Any, Union
from loguru import logger

def create_reply_markup(buttons: List[List[Dict[str, str]]]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.
    
    Args:
        buttons (List[List[Dict[str, str]]]): –°–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏ 'text' –∏ 'callback_data' –∏–ª–∏ 'url'
            –ü—Ä–∏–º–µ—Ä: [[{'text': '–ö–Ω–æ–ø–∫–∞ 1', 'callback_data': 'btn1'}, {'text': '–ö–Ω–æ–ø–∫–∞ 2', 'callback_data': 'btn2'}]]
            
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è Telegram
    """
    keyboard = []
    
    for row in buttons:
        keyboard_row = []
        for button in row:
            if 'url' in button:
                keyboard_row.append(InlineKeyboardButton(button['text'], url=button['url']))
            else:
                keyboard_row.append(InlineKeyboardButton(button['text'], callback_data=button['callback_data']))
        keyboard.append(keyboard_row)
    
    return InlineKeyboardMarkup(keyboard)

def create_main_keyboard(user_has_models: bool = True) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    
    Args:
        user_has_models (bool): –ï—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ–ª–∏
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–Ω–∏ —Å –Ω—É–ª—è" –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    keyboard.append([InlineKeyboardButton("üöÄ –ù–∞—á–Ω–∏ —Å –Ω—É–ª—è", callback_data="cmd_train")])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–µ–ª–∏
    if user_has_models:
        keyboard.append([InlineKeyboardButton("üñºÔ∏è –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="cmd_generate")])
        keyboard.append([InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="cmd_video")])
    
    # –ö–Ω–æ–ø–∫–∞ "–ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã" –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    # keyboard.append([InlineKeyboardButton("üí∞ –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã", callback_data="cmd_credits")])
    
    return InlineKeyboardMarkup(keyboard)

async def send_or_edit_message(
    update: Update, 
    context: ContextTypes.DEFAULT_TYPE, 
    text: str, 
    reply_markup: Optional[InlineKeyboardMarkup] = None,
    edit_message_id: Optional[int] = None,
    parse_mode: Optional[str] = None,
    chat_id: Optional[int] = None
) -> Optional[int]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ.
    
    Args:
        update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
        text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup (Optional[InlineKeyboardMarkup], optional): –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
        edit_message_id (Optional[int], optional): ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
        parse_mode (Optional[str], optional): –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
        chat_id (Optional[int], optional): ID —á–∞—Ç–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None.
        
    Returns:
        Optional[int]: ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω chat_id, –±–µ—Ä–µ–º –∏–∑ update
    if not chat_id and update.effective_chat:
        chat_id = update.effective_chat.id
    
    if not chat_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return None
    
    try:
        if edit_message_id:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=edit_message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {edit_message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            return message.message_id
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            return message.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        return None

async def delete_message(
    context: ContextTypes.DEFAULT_TYPE, 
    chat_id: int, 
    message_id: int
) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞.
    
    Args:
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
        chat_id (int): ID —á–∞—Ç–∞
        message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –∏–∑ —á–∞—Ç–∞ {chat_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}", exc_info=True)
        return False
